<!DOCTYPE html>
<html lang="en">
<head>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet" />
    <meta charset="UTF-8" />
    <title>CatchUp.AI - Revision Notes</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}" />
    <style>
      /* Toggle Wrapper - fixed top-left */
      .toggle-wrapper {
        position: fixed;
        top: 1rem;
        left: 1rem;
        z-index: 9999;
        user-select: none;
      }

      .toggle-label {
        cursor: pointer;
        display: inline-flex;
        width: 60px;
        height: 30px;
        background: #bbb;
        border-radius: 50px;
        position: relative;
        transition: background-color 0.3s ease, box-shadow 0.3s ease;
        box-shadow: 0 0 6px #bbb;
        padding: 2px;
        align-items: center;
        justify-content: space-between;
        font-size: 18px;
        color: #f9f9f9;
        overflow: hidden;
      }

      /* The hidden checkbox */
      #theme-toggle {
        opacity: 0;
        width: 0;
        height: 0;
        position: absolute;
      }

      /* The slider circle */
      .toggle-slider::before {
        content: "";
        position: absolute;
        top: 3px;
        left: 3px;
        width: 24px;
        height: 24px;
        background: white;
        border-radius: 50%;
        transition: transform 0.3s ease;
        z-index: 1;
        box-shadow: 0 0 6px rgba(0,0,0,0.2);
      }

      /* Position icons */
      .icon {
        position: relative;
        z-index: 0;
        pointer-events: none;
        user-select: none;
        width: 18px;
        height: 18px;
        line-height: 18px;
        text-align: center;
        transition: opacity 0.3s ease;
      }

      /* Sun on left, moon on right */
      .icon.sun {
        margin-left: 6px;
        opacity: 1;
      }

      .icon.moon {
        margin-right: 6px;
        opacity: 0.3;
      }

      /* When toggled (light mode) */
      #theme-toggle:checked + .toggle-slider {
        background: #4f96ff;
        box-shadow: 0 0 12px #4f96ffaa;
      }

      #theme-toggle:checked + .toggle-slider::before {
        transform: translateX(30px);
      }

      /* Show moon fully on checked */
      #theme-toggle:checked + .toggle-slider .moon {
        opacity: 1;
      }

      /* Dim sun on checked */
      #theme-toggle:checked + .toggle-slider .sun {
        opacity: 0.3;
      }

      /* Hover popout */
      .toggle-label:hover {
        box-shadow: 0 0 20px #4f96ffcc;
        transform: scale(1.15);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }

      /* COMMON STYLES (both themes) */
      * {
        box-sizing: border-box;
        margin: 0; padding: 0;
        font-synthesis: none;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }

      body, .container, input, select, button, pre {
        transition: background-color 0.4s ease, color 0.4s ease, box-shadow 0.4s ease;
        border-radius: 20px; /* smoother roundness for EVERYTHING */
      }

      /* DARK THEME (default) */
      body {
        font-family: 'Poppins', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
        color: #f0f0f0;
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2rem;  /* more padding to breathe */
        user-select: none;
      }

      .container {
        background: #1f2937;
        max-width: 650px;  /* slightly wider */
        width: 100%;
        padding: 3rem 4rem; /* bigger padding inside */
        border-radius: 24px; /* extra smooth container corners */
        box-shadow: 0 16px 40px rgba(0, 140, 255, 0.3);
        display: flex;
        flex-direction: column;
        gap: 2rem; /* bigger gaps */
      }

      input[type="text"], select, input[type="file"] {
        background: #2d3748;
        color: #d1d5db;
        box-shadow: inset 0 0 8px #00000070;
        padding: 0.9rem 1.2rem;  /* bigger input height */
        font-size: 1.1rem;       /* bigger font */
        border-radius: 20px;     /* smooth edges */
        border: none;
      }

      input[type="text"]:focus, select:focus, input[type="file"]:focus {
        background: #394867;
        color: #fff;
        box-shadow: inset 0 0 12px #4f96ffaa;
        outline: none;
      }

      button {
        background: linear-gradient(45deg, #4f96ff, #0f5cc7);
        color: white;
        box-shadow: 0 8px 20px rgba(15, 92, 199, 0.6);
        padding: 1.1rem 0;       /* taller button */
        font-size: 1.2rem;       /* bigger text */
        font-weight: 700;
        cursor: pointer;
        border-radius: 24px;     /* big rounded button */
        transition: box-shadow 0.25s ease, transform 0.2s ease;
        border: none;
      }

      button:hover, button:focus {
        box-shadow: 0 14px 32px rgba(79, 150, 255, 0.9);
        transform: scale(1.05); /* subtle pop effect */
      }

      /* LIGHT THEME */
      body.light-mode {
        background: #f9fafb;
        color: #222;
        user-select: text;
      }

      body.light-mode .container {
        background: #ffffff;
        box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
        border-radius: 24px;
      }

      body.light-mode input[type="text"],
      body.light-mode select,
      body.light-mode input[type="file"] {
        background: #f0f0f0;
        color: #333;
        box-shadow: inset 0 0 6px #aaaaaa50;
        border-radius: 20px;
        padding: 0.9rem 1.2rem;
        font-size: 1.1rem;

        /* FIX: add visible border in light mode */
        border: 2px solid #cbd5e1;
        transition: border-color 0.3s ease;
      }

      body.light-mode input[type="text"]:focus,
      body.light-mode select:focus,
      body.light-mode input[type="file"]:focus {
        background: #e2e8f0;
        color: #000;
        box-shadow: inset 0 0 12px #666666aa;
        outline: none;

        /* FIX: bright border on focus */
        border-color: #3b82f6;
      }

      body.light-mode button {
        background: linear-gradient(45deg, #3b82f6, #2563eb);
        color: white;
        box-shadow: 0 6px 18px rgba(59, 130, 246, 0.5);
        border-radius: 24px;
        padding: 1.1rem 0;
        font-size: 1.2rem;
        font-weight: 700;
        border: none;
      }

      body.light-mode button:hover,
      body.light-mode button:focus {
        box-shadow: 0 10px 26px rgba(37, 99, 235, 0.75);
        transform: scale(1.05);
      }

      body.light-mode pre {
        background: #e5e7eb;
        color: #1f2937;
        box-shadow: inset 0 0 10px #ccccccaa;
        border-radius: 20px;
      }

      /* Shared pre style */
      pre {
        padding: 2rem 2.25rem;
        border-radius: 24px;
        max-height: 320px;
        overflow-y: auto;
        font-family: 'Fira Mono', monospace;
        font-size: 1.1rem;
        line-height: 1.5;
        white-space: pre-wrap;
        word-break: break-word;
      }

      /* Responsive for all */
      @media (max-width: 768px) {
        .container {
          padding: 2.5rem 2.5rem;
          max-width: 95vw;
        }
        h1 {
          font-size: 2.2rem;
        }
        input[type="text"],
        select,
        input[type="file"],
        button {
          font-size: 1.2rem;
          padding: 1rem 1.2rem;
        }
        pre {
          max-height: 260px;
          font-size: 1.05rem;
        }
      }

      @media (max-width: 480px) {
        body {
          padding: 1.5rem;
        }
        .container {
          padding: 2rem 2rem;
          border-radius: 20px;
        }
        h1 {
          font-size: 1.8rem;
        }
        input[type="text"],
        select,
        input[type="file"],
        button {
          font-size: 1.1rem;
          padding: 1rem 1rem;
        }
        pre {
          max-height: 200px;
          font-size: 1rem;
        }
      }
    </style>
</head>
<body>
    <div class="toggle-wrapper">
      <label for="theme-toggle" class="toggle-label" title="Toggle Dark/Light Mode">
        <input type="checkbox" id="theme-toggle" />
        <span class="toggle-slider">
          <span class="icon sun">‚òÄÔ∏è</span>
          <span class="icon moon">üåô</span>
        </span>
      </label>
    </div>

    <div class="container">
      <h1>CatchUp.AI - Generate & Send Revision Notes</h1>

      <form method="POST" enctype="multipart/form-data">
          <label for="topic">Topic taught:</label><br />
          <input type="text" id="topic" name="topic" required /><br /><br />

          <label for="student-select">Select student to send notes:</label><br />
          <select id="student-select" name="student_id" required>
              <option value="">Loading students...</option>
          </select><br /><br />

          <label for="file">Upload handwritten notes image (optional):</label><br />
          <input type="file" id="file" name="file" accept=".jpg,.jpeg,.png" /><br /><br />

          <button type="submit">Generate & Send Notes</button>
      </form>

      <h2>Summary:</h2>
      <pre>{{ summary or "No summary generated yet." }}</pre>
    </div>

<script>
async function loadMembers() {
    const select = document.getElementById('student-select');
    select.innerHTML = '<option value="">Select student</option>';
    try {
        const response = await fetch('/members');
        const members = await response.json();
        members.forEach(m => {
            const option = document.createElement('option');
            option.value = m.id;
            option.textContent = m.name;
            select.appendChild(option);
        });
    } catch (e) {
        select.innerHTML = '<option value="">Failed to load students</option>';
    }
}

window.onload = () => {
    loadMembers();

    const toggle = document.getElementById('theme-toggle');
    const body = document.body;

    // On page load, check stored theme preference
    if (localStorage.getItem('theme') === 'light') {
        body.classList.add('light-mode');
        toggle.checked = true;
    }

    toggle.addEventListener('change', () => {
        if (toggle.checked) {
            body.classList.add('light-mode');
            localStorage.setItem('theme', 'light');
        } else {
            body.classList.remove('light-mode');
            localStorage.setItem('theme', 'dark');
        }
    });
};
</script>

</body>
</html>
